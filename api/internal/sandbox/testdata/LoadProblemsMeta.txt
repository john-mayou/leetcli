calculate-total-sales-from-csv:
  title: Calculate Total Sales from CSV
  number: 3
  difficulty: easy
  prompt: |
    Given a `sales.csv` file where each line represents a sale (`id`, `product`, `amount`), calculate the
    total amount using `awk`.

    ### Example `sales.csv`:

    ```
    1,Book,12.99
    2,Pen,1.50
    3,Notebook,5.75
    4,Book,12.99
    ```

    ### Expected:

    ```
    Total: 33.23
    ```
  tests:
  - name: Single line
    setup: |
      cat <<SETUP > sales.csv
      Item,Quantity,Price
      1,Book,12.99
      SETUP
    expected: |
      Total: 12.99
  - name: Multi line
    setup: |
      cat <<SETUP > sales.csv
      Item,Quantity,Price
      1,Book,12.99
      2,Pen,1.50
      3,Notebook,5.75
      4,Book,12.99
      SETUP
    expected: |
      Total: 33.23
convert-dates-to-iso-format:
  title: Convert Dates to ISO Format
  number: 2
  difficulty: easy
  prompt: |
    Given a `dates.txt` file containing dates in `MM/DD/YYYY` format, convert them to `YYYY-MM-DD` using `sed`.

    ### Example `dates.txt`

    ```
    04/26/2025
    12/05/2024
    01/01/2023
    ```

    ### Expected:

    ```
    2025-04-26
    2024-12-05
    2023-01-01
    ```
  tests:
  - name: Single line
    setup: |
      echo "04/26/2025" > dates.txt
    expected: |
      2025-04-26
  - name: Multi line
    setup: |
      cat <<SETUP > dates.txt
      04/26/2025
      12/05/2024
      01/01/2023
      SETUP
    expected: |
      2025-04-26
      2024-12-05
      2023-01-01
extract-unique-users-from-api-logs:
  title: Extract Unique Users From API Logs
  number: 5
  difficulty: medium
  prompt: |
    Given a `api_logs.jsonl` file (JSON Lines format), extract a sorted list of unique user IDs where the `"status"` is `"error"`.
    Use a combination of `jq`, `sort`, `uniq`, and optionally `awk` or `grep`.

    ### Exmaple `api_logs.jsonl`

    ```
    { "user_id": 42, "endpoint": "/login", "status": "success" }
    { "user_id": 17, "endpoint": "/purchase", "status": "error" }
    { "user_id": 42, "endpoint": "/update", "status": "error" }
    { "user_id": 17, "endpoint": "/login", "status": "error" }
    { "user_id": 99, "endpoint": "/logout", "status": "success" }
    ```

    ### Expected:

    ```
    17
    42
    ```
  tests:
  - name: Single line
    setup: |
      echo '{ "user_id": 17, "endpoint": "/purchase", "status": "error" }' >> api_logs.jsonl
    expected: |
      17
  - name: Multi line
    setup: |
      cat <<SETUP > api_logs.jsonl
      { "user_id": 42, "endpoint": "/login", "status": "success" }
      { "user_id": 17, "endpoint": "/purchase", "status": "error" }
      { "user_id": 42, "endpoint": "/update", "status": "error" }
      { "user_id": 17, "endpoint": "/login", "status": "error" }
      { "user_id": 99, "endpoint": "/logout", "status": "success" }
      SETUP
    expected: |
      17
      42
find-error-messages-in-logs:
  title: Find Error Messages in Logs
  number: 1
  difficulty: easy
  prompt: |
    Given a `logs.txt` file, extract all the lines that contain the word "error" (case-insensitive) using `grep`.

    ### Example `logs.txt`:

    ```
    INFO: Server started
    ERROR: Failed to connect to DB
    INFO: Error occurred, retrying API request
    WARNING: High memory usage
    ```

    ### Expected:

    ```
    ERROR: Failed to connect to DB
    INFO: Error occured, retrying API request
    ```
  tests:
  - name: Single line
    setup: |
      echo "ERROR: Failed to connect to DB" > logs.txt
    expected: |
      ERROR: Failed to connect to DB
  - name: Multi line
    setup: |
      cat <<SETUP > logs.txt
      INFO: Server started
      ERROR: Failed to connect to DB
      INFO: Error occurred, retrying API request
      WARNING: High memory usage
      SETUP
    expected: |
      ERROR: Failed to connect to DB
      INFO: Error occurred, retrying API request
list-all-usernames-from-json:
  title: List All Usernames From JSON
  number: 4
  difficulty: easy
  prompt: |
    Given a `users.json` array, extract all usernames using `jq`.

    ### Example `users.json`

    ```
    [
      { "id": 1, "username": "alice", "email": "alice@example.com" },
      { "id": 2, "username": "bob", "email": "bob@example.com" },
      { "id": 3, "username": "charlie", "email": "charlie@example.com" }
    ]
    ```

    ### Expected:

    ```
    alice
    bob
    charlie
    ```
  tests:
  - name: Single line
    setup: |
      cat <<SETUP > users.json
      [
        { "id": 1, "username": "alice", "email": "alice@example.com" }
      ]
      SETUP
    expected: |
      alice
  - name: Multi line
    setup: |
      cat <<SETUP > users.json
      [
        { "id": 1, "username": "alice", "email": "alice@example.com" },
        { "id": 2, "username": "bob", "email": "bob@example.com" },
        { "id": 3, "username": "charlie", "email": "charlie@example.com" }
      ]
      SETUP
    expected: |
      alice
      bob
      charlie
