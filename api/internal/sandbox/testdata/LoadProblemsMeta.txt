{
  "calculate-total-sales-from-csv": {
    "number": 3,
    "title": "Calculate Total Sales From CSV",
    "slug": "calculate-total-sales-from-csv",
    "difficulty": "easy",
    "prompt": "Given a `sales.csv` file where each line represents a sale (`id`, `product`, `amount`), calculate the\ntotal amount using `awk`.\n\n### Example `sales.csv`:\n\n```\n1,Book,12.99\n2,Pen,1.50\n3,Notebook,5.75\n4,Book,12.99\n```\n\n### Expected:\n\n```\nTotal: 33.23\n```",
    "input": "1,Book,12.99\n2,Pen,1.50\n3,Notebook,5.75\n4,Book,12.99",
    "expected": "Total: 33.23"
  },
  "convert-dates-to-iso-format": {
    "number": 2,
    "title": "Convert Dates to ISO Format",
    "slug": "convert-dates-to-iso-format",
    "difficulty": "easy",
    "prompt": "Given a `dates.txt` file containing dates in `MM/DD/YYYY` format, convert them to `YYYY-MM-DD` using `sed`.\n\n### Example `dates.txt`\n\n```\n04/26/2025\n12/05/2024\n01/01/2023\n```\n\n### Expected:\n\n```\n2025-04-26\n2024-12-05\n2023-01-01\n```",
    "input": "04/26/2025\n12/05/2024\n01/01/2023",
    "expected": "2025-04-26\n2024-12-05\n2023-01-01"
  },
  "extract-unique-users-from-api-logs": {
    "number": 5,
    "title": "Extract Unique Users From API Logs",
    "slug": "extract-unique-users-from-api-logs",
    "difficulty": "medium",
    "prompt": "Given a `api_logs.jsonl` file (JSON Lines format), extract a sorted list of unique user IDs where the `\"status\"` is `\"error\"`.\nUse a combination of `jq`, `sort`, `uniq`, and optionally `awk` or `grep`.\n\n### Exmaple `api_logs.jsonl`\n\n```\n{ \"user_id\": 42, \"endpoint\": \"/login\", \"status\": \"success\" }\n{ \"user_id\": 17, \"endpoint\": \"/purchase\", \"status\": \"error\" }\n{ \"user_id\": 42, \"endpoint\": \"/update\", \"status\": \"error\" }\n{ \"user_id\": 17, \"endpoint\": \"/login\", \"status\": \"error\" }\n{ \"user_id\": 99, \"endpoint\": \"/logout\", \"status\": \"success\" }\n```\n\n### Expected:\n\n```\n17\n42\n```",
    "input": "{ \"user_id\": 42, \"endpoint\": \"/login\", \"status\": \"success\" }\n{ \"user_id\": 17, \"endpoint\": \"/purchase\", \"status\": \"error\" }\n{ \"user_id\": 42, \"endpoint\": \"/update\", \"status\": \"error\" }\n{ \"user_id\": 17, \"endpoint\": \"/login\", \"status\": \"error\" }\n{ \"user_id\": 99, \"endpoint\": \"/logout\", \"status\": \"success\" }",
    "expected": "17\n42"
  },
  "find-error-messages-in-logs": {
    "number": 1,
    "title": "Find Error Messages in Logs",
    "slug": "find-error-messages-in-logs",
    "difficulty": "easy",
    "prompt": "Given a `logs.txt` file, extract all the lines that contain the word \"error\" (case-insensitive) using `grep`.\n\n### Example `logs.txt`:\n\n```\nINFO: Server started\nERROR: Failed to connect to DB\nINFO: Error occurred, retrying API request\nWARNING: High memory usage\n```\n\n### Expected:\n\n```\nERROR: Failed to connect to DB\nINFO: Error occured, retrying API request\n```",
    "input": "INFO: Server started\nERROR: Failed to connect to DB\nINFO: Error occurred, retrying API request\nWARNING: High memory usage",
    "expected": "ERROR: Failed to connect to DB\nINFO: Error occured, retrying API request"
  },
  "list-all-usernames-from-json": {
    "number": 4,
    "title": "List All Usernames From JSON",
    "slug": "list-all-usernames-from-json",
    "difficulty": "easy",
    "prompt": "Given a `users.json` array, extract all usernames using `jq`.\n\n### Example `users.json`\n\n```\n[\n  { \"id\": 1, \"username\": \"alice\", \"email\": \"alice@example.com\" },\n  { \"id\": 2, \"username\": \"bob\", \"email\": \"bob@example.com\" },\n  { \"id\": 3, \"username\": \"charlie\", \"email\": \"charlie@example.com\" }\n]\n```\n\n### Expected:\n\n```\nalice\nbob\ncharlie\n```",
    "input": "[\n  { \"id\": 1, \"username\": \"alice\", \"email\": \"alice@example.com\" },\n  { \"id\": 2, \"username\": \"bob\", \"email\": \"bob@example.com\" },\n  { \"id\": 3, \"username\": \"charlie\", \"email\": \"charlie@example.com\" }\n]",
    "expected": "alice\nbob\ncharlie"
  }
}